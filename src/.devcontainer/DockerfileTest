#FROM osrf/ros:humble-desktop-full
#FROM rospytorchcudnn
#FROM osrf/ros:humble-desktop-full as ros_stuff

FROM pytorch/pytorch:2.3.1-cuda11.8-cudnn8-devel
#COPY --from=ros_stuff / /
#additional

ARG OPENCV_VERSION="4.9.0"
ENV TZ=Europe/Berlin \
    DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt clean
RUN apt update

RUN apt-get install -y --no-install-recommends --fix-missing \
        build-essential binutils \
        ca-certificates cmake cmake-qt-gui curl \
        dbus-x11 \
        ffmpeg \
        gdb gcc g++ gfortran git \
        tar \
        lsb-release \
        procps \
        manpages-dev \
        unzip \
        zip \
        wget \
        xauth \
        swig \
        python3-pip python3-dev python3-numpy python3-distutils \
        python3-setuptools python3-pyqt5 python3-opencv \
        libboost-python-dev libboost-thread-dev libatlas-base-dev libavcodec-dev \
        libavformat-dev libavutil-dev libcanberra-gtk3-module libeigen3-dev \
        libglew-dev libgl1-mesa-dev libgl1-mesa-glx libglib2.0-0 libgtk2.0-dev \
        libgtk-3-dev libjpeg-dev libjpeg8-dev libjpeg-turbo8-dev liblapack-dev \
        liblapacke-dev libopenblas-dev libopencv-dev libpng-dev libpostproc-dev \
        libpq-dev libsm6 libswscale-dev libtbb-dev libtbb2 libtesseract-dev \
        libtiff-dev libtiff5-dev libv4l-dev libx11-dev libxext6 libxine2-dev \
        libxrender-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev \
        libvtk9-dev libdc1394-dev libgstreamer-plugins-base1.0-dev \
        libgstreamer1.0-dev libopenexr-dev\
        openexr \
        pkg-config \
        qv4l2 \
        v4l-utils \
        zlib1g-dev \
        locales
#        && locale-gen en_US.UTF-8 \
#        && LC_ALL=en_US.UTF-8 \
RUN #apt-get rm -rf /var/lib/apt/lists/*
RUN #apt-get clean


WORKDIR /opencv
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \
    && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \
    && unzip opencv.zip \
    && unzip opencv_contrib.zip \
    && mv opencv-${OPENCV_VERSION} opencv \
    && mv opencv_contrib-${OPENCV_VERSION} opencv_contrib

RUN mkdir /opencv/opencv/build
WORKDIR /opencv/opencv/build

#RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
# -D CMAKE_INSTALL_PREFIX=/usr/local \
# -D INSTALL_PYTHON_EXAMPLES=ON \
# -D INSTALL_C_EXAMPLES=ON \
# -D OPENCV_ENABLE_NONFREE=ON \
# -D OPENCV_GENERATE_PKGCONFIG=ON \
# -D OPENCV_EXTRA_MODULES_PATH=/opencv/opencv_contrib/modules \
# -D PYTHON_EXECUTABLE=/usr/local/bin/python \
# -D BUILD_EXAMPLES=ON .. \
#    && make -j$(nproc) && make install && ldconfig
RUN  cmake -D CMAKE_BUILD_TYPE=Release \
                                                -D CMAKE_INSTALL_PREFIX=/usr/local \
                                                -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules/ \
                                                -D PYTHON3_EXECUTABLE=/usr/bin/python3 \
                                                -D PYTHON3_INCLUDE_DIR=/usr/include/python3.8/ \
                                                -D PYTHON3_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.8/ \
                                                -D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so \
                                                -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include/ \
                                                -D OPENCV_GENERATE_PKGCONFIG=ON \
                                                -D OPENCV_PC_FILE_NAME=opencv.pc \
                                                -D WITH_CUDA=ON \
                                                -D WITH_CUDNN=ON \
                                                -D OPENCV_DNN_CUDA=ON \
                                                -D CUDA_ARCH_BIN=6.0,6.1,6.2,7.0,7.2,7.5,8.0,8.6,8.9 \
                                                -D ENABLE_FAST_MATH=ON \
                                                -D CUDA_FAST_MATH=ON \
                                                -D WITH_CUFFT=ON \
                                                -D WITH_CUBLAS=ON \
                                                -D WITH_V4L=ON \
                                                -D WITH_OPENCL=ON \
                                                -D WITH_OPENGL=ON \
                                                -D WITH_GSTREAMER=ON \
                                                -D WITH_TBB=ON -DOPENCV_ENABLE_NONFREE:BOOL=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules ..
RUN  cmake --build . --config Release -- -j 10


#ENV TZ=Europe/Berlin \
#    DEBIAN_FRONTEND=noninteractive
#
#ARG USERNAME=tim-external
#ARG USER_UID=1000
#ARG USER_GID=$USER_UID
#
## Create the user
#RUN groupadd --gid $USER_GID $USERNAME \
#    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
#    #
#    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
#    && apt-get update \
#    && apt-get install -y sudo \
#    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
#    && chmod 0440 /etc/sudoers.d/$USERNAME
#RUN apt-get update && apt-get upgrade -y
#RUN apt-get install -y python3-pip
#
#
#
#
#RUN apt install -y build-essential cmake pkg-config unzip yasm git checkinstall  # generic tools
#RUN apt install -y cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev  # required
#RUN apt install -y python3-dev python3-numpy python3-pip
#RUN apt install -y python3-testresources
#RUN apt install -y libjpeg-dev libpng-dev libtiff-dev
#RUN apt install -y libavcodec-dev
#RUN apt install -y  libavformat-dev
#RUN apt install -y  libswscale-dev
#RUN apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
#RUN apt install -y libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev
#RUN apt install -y libfaac-dev libmp3lame-dev libvorbis-dev
#RUN apt install -y libopencore-amrnb-dev libopencore-amrwb-dev
#RUN apt install -y libgtk-3-dev
#RUN apt install -y libtbb2 libtbb-dev
#RUN apt install -y libatlas-base-dev gfortran
#RUN apt install -y libprotobuf-dev protobuf-compiler
#RUN apt install -y libgoogle-glog-dev libgflags-dev
#RUN apt install -y libgphoto2-dev libeigen3-dev libhdf5-dev doxygen
#
#RUN python3 -m pip uninstall opencv-python-headless
#RUN apt remove python3-opencv -y
#
#
#
#RUN apt install pkg-config -y
#RUN apt install fftw3 fftw3-dev -y
#RUN apt install nlohmann-json3-dev -y
#RUN apt install build-essential libgtk2.0-dev libgtk-3-dev -y
#RUN apt install libqt5gamepad5-dev -y
#RUN apt install libtbb-dev -y
#RUN apt install libcgal-dev -y
#
#
#
#
#RUN mkdir /install_ws
#RUN mkdir /install_ws/opencvInstall
#RUN cd /install_ws/opencvInstall && git clone https://github.com/opencv/opencv.git
#RUN cd /install_ws/opencvInstall/opencv && git checkout 4.9.0
#RUN cd /install_ws/opencvInstall && git clone https://github.com/opencv/opencv_contrib.git
#RUN cd /install_ws/opencvInstall/opencv_contrib && git checkout 4.9.0
#RUN mkdir /install_ws/opencvInstall/build
#
#RUN cd /install_ws/opencvInstall/build && cmake -D CMAKE_BUILD_TYPE=Release \
#                                                -D CMAKE_INSTALL_PREFIX=/usr/local \
#                                                -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules/ \
#                                                -D PYTHON3_EXECUTABLE=/usr/bin/python3 \
#                                                -D PYTHON3_INCLUDE_DIR=/usr/include/python3.8/ \
#                                                -D PYTHON3_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.8/ \
#                                                -D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.8.so \
#                                                -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include/ \
#                                                -D OPENCV_GENERATE_PKGCONFIG=ON \
#                                                -D OPENCV_PC_FILE_NAME=opencv.pc \
#                                                -D WITH_CUDA=ON \
#                                                -D WITH_CUDNN=ON \
#                                                -D OPENCV_DNN_CUDA=ON \
#                                                -D CUDA_ARCH_BIN=6.0,6.1,6.2,7.0,7.2,7.5,8.0,8.6,8.9 \
#                                                -D ENABLE_FAST_MATH=ON \
#                                                -D CUDA_FAST_MATH=ON \
#                                                -D WITH_CUFFT=ON \
#                                                -D WITH_CUBLAS=ON \
#                                                -D WITH_V4L=ON \
#                                                -D WITH_OPENCL=ON \
#                                                -D WITH_OPENGL=ON \
#                                                -D WITH_GSTREAMER=ON \
#                                                -D WITH_TBB=ON -DOPENCV_ENABLE_NONFREE:BOOL=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ../opencv
#RUN cd /install_ws/opencvInstall/build && cmake --build . --config Release -- -j 10
#RUN cd /install_ws/opencvInstall/build && sudo make install
## PCL install
#RUN cd /install_ws && git clone https://github.com/PointCloudLibrary/pcl
#RUN cd /install_ws/pcl && git checkout pcl-1.14.1
#RUN mkdir /install_ws/pcl/build
#RUN cd /install_ws/pcl/build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
#RUN cd /install_ws/pcl/build && make -j10
#RUN cd /install_ws/pcl/build && sudo make -j10 install
# gtsam not tested
#RUN cd /install_ws && git clone https://github.com/borglab/gtsam.git
#RUN cd /install_ws/gtsam && git checkout 4.2a7
#RUN mkdir /install_ws/gtsam/build
#RUN cd /install_ws/gtsam/build && cmake .. -DGTSAM_USE_SYSTEM_EIGEN=ON
#RUN cd /install_ws/gtsam/build && make
#RUN cd /install_ws/gtsam/build && sudo make install

#install ROS here:

#RUN apt install software-properties-common -y
#RUN add-apt-repository universe -y
#RUN apt update && sudo apt install curl -y
#RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
#RUN "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
#
#RUN apt update -y
#RUN apt upgrade -y
#
#RUN apt install ros-humble-desktop -y
#RUN apt install ros-dev-tools -y
#RUN apt install ros-humble-tf2-geometry-msgs ros-humble-tf2 -y




ENV SHELL /bin/bash

# ********************************************************
# * Anything else you want to do like clean up goes here *
# ********************************************************

# [Optional] Set the default user. Omit if you want to keep the default as root.
USER $USERNAME
CMD ["/bin/bash"]